// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 更改用户名
type CChangeNickname struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1901" json:"code,omitempty"`
	Nickname         *string `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CChangeNickname) Reset()                    { *m = CChangeNickname{} }
func (m *CChangeNickname) String() string            { return proto.CompactTextString(m) }
func (*CChangeNickname) ProtoMessage()               {}
func (*CChangeNickname) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

const Default_CChangeNickname_Code uint32 = 1901

func (m *CChangeNickname) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CChangeNickname_Code
}

func (m *CChangeNickname) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

type SChangeNickname struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1901" json:"code,omitempty"`
	Nickname         *string `protobuf:"bytes,2,req,name=nickname" json:"nickname,omitempty"`
	Error            *uint32 `protobuf:"varint,3,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SChangeNickname) Reset()                    { *m = SChangeNickname{} }
func (m *SChangeNickname) String() string            { return proto.CompactTextString(m) }
func (*SChangeNickname) ProtoMessage()               {}
func (*SChangeNickname) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

const Default_SChangeNickname_Code uint32 = 1901
const Default_SChangeNickname_Error uint32 = 0

func (m *SChangeNickname) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SChangeNickname_Code
}

func (m *SChangeNickname) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *SChangeNickname) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SChangeNickname_Error
}

// 更改用户性别
type CChangeSex struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1902" json:"code,omitempty"`
	Sex              *uint32 `protobuf:"varint,2,req,name=sex" json:"sex,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CChangeSex) Reset()                    { *m = CChangeSex{} }
func (m *CChangeSex) String() string            { return proto.CompactTextString(m) }
func (*CChangeSex) ProtoMessage()               {}
func (*CChangeSex) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

const Default_CChangeSex_Code uint32 = 1902

func (m *CChangeSex) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CChangeSex_Code
}

func (m *CChangeSex) GetSex() uint32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

type SChangeSex struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1902" json:"code,omitempty"`
	Sex              *uint32 `protobuf:"varint,2,req,name=sex" json:"sex,omitempty"`
	Error            *uint32 `protobuf:"varint,3,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SChangeSex) Reset()                    { *m = SChangeSex{} }
func (m *SChangeSex) String() string            { return proto.CompactTextString(m) }
func (*SChangeSex) ProtoMessage()               {}
func (*SChangeSex) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

const Default_SChangeSex_Code uint32 = 1902
const Default_SChangeSex_Error uint32 = 0

func (m *SChangeSex) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SChangeSex_Code
}

func (m *SChangeSex) GetSex() uint32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *SChangeSex) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SChangeSex_Error
}

//  战绩
type CArchieve struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1904" json:"code,omitempty"`
	Userid           *string `protobuf:"bytes,2,req,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CArchieve) Reset()                    { *m = CArchieve{} }
func (m *CArchieve) String() string            { return proto.CompactTextString(m) }
func (*CArchieve) ProtoMessage()               {}
func (*CArchieve) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

const Default_CArchieve_Code uint32 = 1904

func (m *CArchieve) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CArchieve_Code
}

func (m *CArchieve) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

type SArchieve struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1904" json:"code,omitempty"`
	Best             *string `protobuf:"bytes,2,req,name=best" json:"best,omitempty"`
	Maxcoin          *uint32 `protobuf:"varint,3,req,name=maxcoin" json:"maxcoin,omitempty"`
	Gaincoin         *uint32 `protobuf:"varint,4,req,name=gaincoin" json:"gaincoin,omitempty"`
	Singlecoin       *uint32 `protobuf:"varint,5,req,name=singlecoin" json:"singlecoin,omitempty"`
	Qinglongdui      *uint32 `protobuf:"varint,6,req,name=qinglongdui" json:"qinglongdui,omitempty"`
	Longqi           *uint32 `protobuf:"varint,7,req,name=longqi" json:"longqi,omitempty"`
	Qingqi           *uint32 `protobuf:"varint,8,req,name=qingqi" json:"qingqi,omitempty"`
	Qingdui          *uint32 `protobuf:"varint,9,req,name=qingdui" json:"qingdui,omitempty"`
	Qing             *uint32 `protobuf:"varint,10,req,name=qing" json:"qing,omitempty"`
	Qidui            *uint32 `protobuf:"varint,11,req,name=qidui" json:"qidui,omitempty"`
	Pengpenghu       *uint32 `protobuf:"varint,12,req,name=pengpenghu" json:"pengpenghu,omitempty"`
	Tianhu           *uint32 `protobuf:"varint,13,req,name=tianhu" json:"tianhu,omitempty"`
	Dihu             *uint32 `protobuf:"varint,14,req,name=dihu" json:"dihu,omitempty"`
	Userid           *string `protobuf:"bytes,15,req,name=userid" json:"userid,omitempty"`
	Hutype           *uint32 `protobuf:"varint,16,req,name=hutype" json:"hutype,omitempty"`
	Error            *uint32 `protobuf:"varint,17,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SArchieve) Reset()                    { *m = SArchieve{} }
func (m *SArchieve) String() string            { return proto.CompactTextString(m) }
func (*SArchieve) ProtoMessage()               {}
func (*SArchieve) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

const Default_SArchieve_Code uint32 = 1904
const Default_SArchieve_Error uint32 = 0

func (m *SArchieve) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SArchieve_Code
}

func (m *SArchieve) GetBest() string {
	if m != nil && m.Best != nil {
		return *m.Best
	}
	return ""
}

func (m *SArchieve) GetMaxcoin() uint32 {
	if m != nil && m.Maxcoin != nil {
		return *m.Maxcoin
	}
	return 0
}

func (m *SArchieve) GetGaincoin() uint32 {
	if m != nil && m.Gaincoin != nil {
		return *m.Gaincoin
	}
	return 0
}

func (m *SArchieve) GetSinglecoin() uint32 {
	if m != nil && m.Singlecoin != nil {
		return *m.Singlecoin
	}
	return 0
}

func (m *SArchieve) GetQinglongdui() uint32 {
	if m != nil && m.Qinglongdui != nil {
		return *m.Qinglongdui
	}
	return 0
}

func (m *SArchieve) GetLongqi() uint32 {
	if m != nil && m.Longqi != nil {
		return *m.Longqi
	}
	return 0
}

func (m *SArchieve) GetQingqi() uint32 {
	if m != nil && m.Qingqi != nil {
		return *m.Qingqi
	}
	return 0
}

func (m *SArchieve) GetQingdui() uint32 {
	if m != nil && m.Qingdui != nil {
		return *m.Qingdui
	}
	return 0
}

func (m *SArchieve) GetQing() uint32 {
	if m != nil && m.Qing != nil {
		return *m.Qing
	}
	return 0
}

func (m *SArchieve) GetQidui() uint32 {
	if m != nil && m.Qidui != nil {
		return *m.Qidui
	}
	return 0
}

func (m *SArchieve) GetPengpenghu() uint32 {
	if m != nil && m.Pengpenghu != nil {
		return *m.Pengpenghu
	}
	return 0
}

func (m *SArchieve) GetTianhu() uint32 {
	if m != nil && m.Tianhu != nil {
		return *m.Tianhu
	}
	return 0
}

func (m *SArchieve) GetDihu() uint32 {
	if m != nil && m.Dihu != nil {
		return *m.Dihu
	}
	return 0
}

func (m *SArchieve) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

func (m *SArchieve) GetHutype() uint32 {
	if m != nil && m.Hutype != nil {
		return *m.Hutype
	}
	return 0
}

func (m *SArchieve) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SArchieve_Error
}

// 获取玩家的数据
type CUserData struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1020" json:"code,omitempty"`
	Userid           *string `protobuf:"bytes,2,req,name=userid" json:"userid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CUserData) Reset()                    { *m = CUserData{} }
func (m *CUserData) String() string            { return proto.CompactTextString(m) }
func (*CUserData) ProtoMessage()               {}
func (*CUserData) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

const Default_CUserData_Code uint32 = 1020

func (m *CUserData) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CUserData_Code
}

func (m *CUserData) GetUserid() string {
	if m != nil && m.Userid != nil {
		return *m.Userid
	}
	return ""
}

type SUserData struct {
	Code             *uint32   `protobuf:"varint,1,opt,name=code,def=1020" json:"code,omitempty"`
	Data             *UserData `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	Error            *uint32   `protobuf:"varint,3,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *SUserData) Reset()                    { *m = SUserData{} }
func (m *SUserData) String() string            { return proto.CompactTextString(m) }
func (*SUserData) ProtoMessage()               {}
func (*SUserData) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

const Default_SUserData_Code uint32 = 1020
const Default_SUserData_Error uint32 = 0

func (m *SUserData) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SUserData_Code
}

func (m *SUserData) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SUserData) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SUserData_Error
}

// 防沉迷限制
type SChenmi struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=1021" json:"code,omitempty"`
	Coin             *int32  `protobuf:"varint,2,opt,name=coin" json:"coin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SChenmi) Reset()                    { *m = SChenmi{} }
func (m *SChenmi) String() string            { return proto.CompactTextString(m) }
func (*SChenmi) ProtoMessage()               {}
func (*SChenmi) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

const Default_SChenmi_Code uint32 = 1021

func (m *SChenmi) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SChenmi_Code
}

func (m *SChenmi) GetCoin() int32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func init() {
	proto.RegisterType((*CChangeNickname)(nil), "protocol.CChangeNickname")
	proto.RegisterType((*SChangeNickname)(nil), "protocol.SChangeNickname")
	proto.RegisterType((*CChangeSex)(nil), "protocol.CChangeSex")
	proto.RegisterType((*SChangeSex)(nil), "protocol.SChangeSex")
	proto.RegisterType((*CArchieve)(nil), "protocol.CArchieve")
	proto.RegisterType((*SArchieve)(nil), "protocol.SArchieve")
	proto.RegisterType((*CUserData)(nil), "protocol.CUserData")
	proto.RegisterType((*SUserData)(nil), "protocol.SUserData")
	proto.RegisterType((*SChenmi)(nil), "protocol.SChenmi")
}

var fileDescriptor13 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6a, 0xab, 0x40,
	0x14, 0xc6, 0xd1, 0xf8, 0xf7, 0x18, 0x35, 0x77, 0xee, 0x66, 0xb8, 0x2b, 0x71, 0x15, 0xb8, 0xdc,
	0x5c, 0x13, 0x0a, 0xa5, 0xdd, 0x94, 0x62, 0x37, 0xdd, 0x74, 0x23, 0x7d, 0x80, 0xa9, 0x0e, 0x3a,
	0x34, 0x99, 0x89, 0xff, 0x42, 0xfa, 0x4c, 0x7d, 0xc9, 0x32, 0x53, 0x2d, 0x2d, 0x91, 0x50, 0xba,
	0x10, 0x39, 0xbf, 0x39, 0xdf, 0x37, 0xe7, 0x7c, 0x0a, 0xd0, 0xb7, 0xb4, 0x59, 0xed, 0x1b, 0xd1,
	0x09, 0xe4, 0xa8, 0x57, 0x2e, 0xb6, 0x7f, 0x9c, 0x83, 0x78, 0x67, 0xf1, 0x25, 0x84, 0x69, 0x5a,
	0x11, 0x5e, 0xd2, 0x07, 0x96, 0x3f, 0x73, 0xb2, 0xa3, 0x08, 0x81, 0x91, 0x8b, 0x82, 0x62, 0x2d,
	0xd2, 0x96, 0xfe, 0xb5, 0xb1, 0xbe, 0x4a, 0xd6, 0x68, 0x01, 0x0e, 0x1f, 0xce, 0xb1, 0x1e, 0xe9,
	0x4b, 0x37, 0xbe, 0x87, 0x30, 0xfb, 0x89, 0x10, 0x2d, 0xc0, 0xa4, 0x4d, 0x23, 0x1a, 0x3c, 0x53,
	0x6d, 0x5a, 0x12, 0xff, 0x03, 0x18, 0x66, 0xc8, 0xe8, 0x71, 0xc2, 0x65, 0x83, 0x3c, 0x98, 0xb5,
	0xf4, 0xa8, 0x0c, 0xfc, 0xf8, 0x06, 0x20, 0xfb, 0x7e, 0xfb, 0xc4, 0x7d, 0xff, 0xc1, 0x4d, 0x6f,
	0x9b, 0xbc, 0x62, 0xf4, 0x30, 0x35, 0xf4, 0x05, 0x0a, 0xc0, 0x92, 0xb1, 0xb1, 0x62, 0xd8, 0xf5,
	0x55, 0x07, 0x37, 0x3b, 0xab, 0x98, 0x83, 0xf1, 0x44, 0xdb, 0x6e, 0x58, 0x31, 0x04, 0x7b, 0x47,
	0x8e, 0xb9, 0x60, 0x1c, 0xcf, 0x86, 0x19, 0x9c, 0x92, 0x30, 0xae, 0x88, 0xa1, 0x08, 0x02, 0x68,
	0x19, 0x2f, 0xb7, 0x54, 0x31, 0x53, 0xb1, 0xdf, 0xe0, 0xd5, 0x92, 0x09, 0x5e, 0x16, 0x3d, 0xc3,
	0x96, 0x82, 0x01, 0x58, 0x12, 0xd4, 0x0c, 0xdb, 0x63, 0x2d, 0x9b, 0x6a, 0x86, 0x1d, 0x55, 0x87,
	0x60, 0xcb, 0x5a, 0x0a, 0x5c, 0x05, 0xe6, 0x60, 0x48, 0x80, 0x41, 0x55, 0x3e, 0x98, 0x35, 0x93,
	0x87, 0xde, 0x78, 0xed, 0x9e, 0xf2, 0x52, 0x3e, 0x55, 0x8f, 0xe7, 0xa3, 0x63, 0xc7, 0x08, 0xaf,
	0x7a, 0xec, 0x8f, 0x06, 0x05, 0xab, 0x7a, 0x1c, 0x8c, 0xa7, 0x43, 0x16, 0xa1, 0xda, 0x2d, 0x00,
	0xab, 0xea, 0xbb, 0x97, 0x3d, 0xc5, 0x8b, 0xaf, 0xf1, 0xfe, 0xfa, 0x1c, 0xef, 0x63, 0x4b, 0x9b,
	0x3b, 0xd2, 0x91, 0x93, 0xb0, 0x92, 0x4d, 0x72, 0x12, 0x6f, 0x06, 0x6e, 0x76, 0x56, 0x10, 0x81,
	0x51, 0x90, 0x8e, 0xa8, 0x76, 0x6f, 0x83, 0x56, 0xe3, 0x7f, 0xbc, 0xfa, 0x50, 0x9d, 0x7e, 0xe4,
	0xbf, 0x60, 0x67, 0x69, 0x45, 0xf9, 0x8e, 0x4d, 0x58, 0xae, 0xe5, 0x92, 0x2a, 0x79, 0x3d, 0xd2,
	0x96, 0xe6, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0xf3, 0x22, 0xb9, 0x26, 0x03, 0x00, 0x00,
}
