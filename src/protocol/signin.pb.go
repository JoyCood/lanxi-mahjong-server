// Code generated by protoc-gen-go.
// source: signin.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家每日连续签到
type CSign struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=7901" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSign) Reset()                    { *m = CSign{} }
func (m *CSign) String() string            { return proto.CompactTextString(m) }
func (*CSign) ProtoMessage()               {}
func (*CSign) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

const Default_CSign_Code uint32 = 7901

func (m *CSign) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CSign_Code
}

type SSign struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=7901" json:"code,omitempty"`
	Total            *uint32 `protobuf:"varint,2,req,name=total" json:"total,omitempty"`
	Acc              *uint32 `protobuf:"varint,3,req,name=acc" json:"acc,omitempty"`
	History          *uint32 `protobuf:"varint,4,req,name=history" json:"history,omitempty"`
	Error            *uint32 `protobuf:"varint,5,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSign) Reset()                    { *m = SSign{} }
func (m *SSign) String() string            { return proto.CompactTextString(m) }
func (*SSign) ProtoMessage()               {}
func (*SSign) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

const Default_SSign_Code uint32 = 7901
const Default_SSign_Error uint32 = 0

func (m *SSign) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SSign_Code
}

func (m *SSign) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *SSign) GetAcc() uint32 {
	if m != nil && m.Acc != nil {
		return *m.Acc
	}
	return 0
}

func (m *SSign) GetHistory() uint32 {
	if m != nil && m.History != nil {
		return *m.History
	}
	return 0
}

func (m *SSign) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SSign_Error
}

// 玩家获取已经签到的天数
type CSignDay struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=7902" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSignDay) Reset()                    { *m = CSignDay{} }
func (m *CSignDay) String() string            { return proto.CompactTextString(m) }
func (*CSignDay) ProtoMessage()               {}
func (*CSignDay) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

const Default_CSignDay_Code uint32 = 7902

func (m *CSignDay) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CSignDay_Code
}

type SSignDay struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=7902" json:"code,omitempty"`
	Total            *uint32 `protobuf:"varint,2,req,name=total" json:"total,omitempty"`
	Acc              *uint32 `protobuf:"varint,3,req,name=acc" json:"acc,omitempty"`
	Accrewards       *bool   `protobuf:"varint,4,req,name=accrewards" json:"accrewards,omitempty"`
	Totalrewards     *bool   `protobuf:"varint,5,req,name=totalrewards" json:"totalrewards,omitempty"`
	History          *uint32 `protobuf:"varint,6,req,name=history" json:"history,omitempty"`
	Times            *uint32 `protobuf:"varint,7,req,name=times" json:"times,omitempty"`
	Error            *uint32 `protobuf:"varint,8,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSignDay) Reset()                    { *m = SSignDay{} }
func (m *SSignDay) String() string            { return proto.CompactTextString(m) }
func (*SSignDay) ProtoMessage()               {}
func (*SSignDay) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

const Default_SSignDay_Code uint32 = 7902
const Default_SSignDay_Error uint32 = 0

func (m *SSignDay) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SSignDay_Code
}

func (m *SSignDay) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *SSignDay) GetAcc() uint32 {
	if m != nil && m.Acc != nil {
		return *m.Acc
	}
	return 0
}

func (m *SSignDay) GetAccrewards() bool {
	if m != nil && m.Accrewards != nil {
		return *m.Accrewards
	}
	return false
}

func (m *SSignDay) GetTotalrewards() bool {
	if m != nil && m.Totalrewards != nil {
		return *m.Totalrewards
	}
	return false
}

func (m *SSignDay) GetHistory() uint32 {
	if m != nil && m.History != nil {
		return *m.History
	}
	return 0
}

func (m *SSignDay) GetTimes() uint32 {
	if m != nil && m.Times != nil {
		return *m.Times
	}
	return 0
}

func (m *SSignDay) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SSignDay_Error
}

//  补签
type CReSign struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=7904" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CReSign) Reset()                    { *m = CReSign{} }
func (m *CReSign) String() string            { return proto.CompactTextString(m) }
func (*CReSign) ProtoMessage()               {}
func (*CReSign) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

const Default_CReSign_Code uint32 = 7904

func (m *CReSign) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CReSign_Code
}

type SReSign struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=7904" json:"code,omitempty"`
	Total            *uint32 `protobuf:"varint,2,req,name=total" json:"total,omitempty"`
	Acc              *uint32 `protobuf:"varint,3,req,name=acc" json:"acc,omitempty"`
	History          *uint32 `protobuf:"varint,4,req,name=history" json:"history,omitempty"`
	Error            *uint32 `protobuf:"varint,5,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SReSign) Reset()                    { *m = SReSign{} }
func (m *SReSign) String() string            { return proto.CompactTextString(m) }
func (*SReSign) ProtoMessage()               {}
func (*SReSign) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

const Default_SReSign_Code uint32 = 7904
const Default_SReSign_Error uint32 = 0

func (m *SReSign) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SReSign_Code
}

func (m *SReSign) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *SReSign) GetAcc() uint32 {
	if m != nil && m.Acc != nil {
		return *m.Acc
	}
	return 0
}

func (m *SReSign) GetHistory() uint32 {
	if m != nil && m.History != nil {
		return *m.History
	}
	return 0
}

func (m *SReSign) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SReSign_Error
}

func init() {
	proto.RegisterType((*CSign)(nil), "protocol.CSign")
	proto.RegisterType((*SSign)(nil), "protocol.SSign")
	proto.RegisterType((*CSignDay)(nil), "protocol.CSignDay")
	proto.RegisterType((*SSignDay)(nil), "protocol.SSignDay")
	proto.RegisterType((*CReSign)(nil), "protocol.CReSign")
	proto.RegisterType((*SReSign)(nil), "protocol.SReSign")
}

var fileDescriptor9 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x90, 0xc1, 0x4a, 0xc6, 0x30,
	0x10, 0x84, 0xc9, 0xdf, 0xc6, 0x84, 0xb5, 0x45, 0x09, 0x1e, 0x02, 0xa2, 0x94, 0x9c, 0x7a, 0x92,
	0x2a, 0x82, 0xe8, 0xb5, 0x3e, 0x81, 0xb9, 0x89, 0x97, 0x90, 0x86, 0x1a, 0xa8, 0x8d, 0x24, 0x01,
	0xe9, 0x8b, 0xf8, 0xbc, 0xe2, 0x42, 0x41, 0xc1, 0xf6, 0xe2, 0x29, 0x64, 0x76, 0x77, 0xe6, 0x63,
	0xa0, 0x4a, 0x7e, 0x9c, 0xfd, 0x7c, 0xf5, 0x1e, 0x43, 0x0e, 0x82, 0xe3, 0x63, 0xc3, 0xa4, 0xce,
	0x81, 0xf6, 0xda, 0x8f, 0xb3, 0x10, 0x50, 0xda, 0x30, 0x38, 0x49, 0x1a, 0xd2, 0xd6, 0x0f, 0xe5,
	0xdd, 0x7d, 0x77, 0xad, 0x9e, 0x81, 0xea, 0xad, 0xa1, 0xa8, 0x81, 0xe6, 0x90, 0xcd, 0x24, 0x0f,
	0xcd, 0xa1, 0xad, 0xc5, 0x31, 0x14, 0xc6, 0x5a, 0x59, 0xe0, 0xe7, 0x04, 0xd8, 0xab, 0x4f, 0x39,
	0xc4, 0x45, 0x96, 0x28, 0x9c, 0x02, 0x75, 0x31, 0x86, 0x28, 0x29, 0x3a, 0x90, 0x4e, 0x5d, 0x02,
	0xc7, 0xe0, 0x47, 0xb3, 0xfc, 0x61, 0x7f, 0xa3, 0x3e, 0x09, 0x70, 0xbd, 0xb3, 0xb0, 0x9b, 0x2f,
	0x00, 0x8c, 0xb5, 0xd1, 0x7d, 0x98, 0x38, 0x24, 0x44, 0xe0, 0xe2, 0x0c, 0x2a, 0xdc, 0x5f, 0x55,
	0x8a, 0xea, 0x0f, 0xd2, 0x23, 0x3c, 0xfd, 0xb6, 0xf5, 0x6f, 0x2e, 0x49, 0xf6, 0x1b, 0x9c, 0xaf,
	0xe0, 0x17, 0xc0, 0xfa, 0x27, 0xb7, 0x51, 0xcb, 0xad, 0x7a, 0x01, 0xa6, 0xb7, 0xc7, 0xff, 0x6c,
	0xed, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x42, 0x9b, 0x1e, 0x19, 0xc7, 0x01, 0x00, 0x00,
}
