// Code generated by protoc-gen-go.
// source: ranking.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 每周一凌晨4点更新总财富榜
type CRankCoin struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=6000" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CRankCoin) Reset()                    { *m = CRankCoin{} }
func (m *CRankCoin) String() string            { return proto.CompactTextString(m) }
func (*CRankCoin) ProtoMessage()               {}
func (*CRankCoin) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

const Default_CRankCoin_Code uint32 = 6000

func (m *CRankCoin) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CRankCoin_Code
}

// 每个帮排名前100(列表长度有可能排不到100),前端自己遍历rank列表获取自己的排行数据，如果没有找到则不上榜，以下排行同理
type SRankCoin struct {
	Code             *uint32     `protobuf:"varint,1,opt,name=code,def=6000" json:"code,omitempty"`
	Rank             []*RankCoin `protobuf:"bytes,2,rep,name=rank" json:"rank,omitempty"`
	Coin             *uint32     `protobuf:"varint,3,req,name=coin" json:"coin,omitempty"`
	Drawed           *uint32     `protobuf:"varint,4,req,name=drawed" json:"drawed,omitempty"`
	Error            *uint32     `protobuf:"varint,5,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SRankCoin) Reset()                    { *m = SRankCoin{} }
func (m *SRankCoin) String() string            { return proto.CompactTextString(m) }
func (*SRankCoin) ProtoMessage()               {}
func (*SRankCoin) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

const Default_SRankCoin_Code uint32 = 6000
const Default_SRankCoin_Error uint32 = 0

func (m *SRankCoin) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SRankCoin_Code
}

func (m *SRankCoin) GetRank() []*RankCoin {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *SRankCoin) GetCoin() uint32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *SRankCoin) GetDrawed() uint32 {
	if m != nil && m.Drawed != nil {
		return *m.Drawed
	}
	return 0
}

func (m *SRankCoin) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SRankCoin_Error
}

// 每日凌晨4点更新昨日赢得金排行
type CRankGainCoin struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=6001" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CRankGainCoin) Reset()                    { *m = CRankGainCoin{} }
func (m *CRankGainCoin) String() string            { return proto.CompactTextString(m) }
func (*CRankGainCoin) ProtoMessage()               {}
func (*CRankGainCoin) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

const Default_CRankGainCoin_Code uint32 = 6001

func (m *CRankGainCoin) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CRankGainCoin_Code
}

type SRankGainCoin struct {
	Code             *uint32     `protobuf:"varint,1,opt,name=code,def=6001" json:"code,omitempty"`
	Rank             []*RankCoin `protobuf:"bytes,2,rep,name=rank" json:"rank,omitempty"`
	Coin             *int32      `protobuf:"varint,3,req,name=coin" json:"coin,omitempty"`
	Drawed           *uint32     `protobuf:"varint,4,req,name=drawed" json:"drawed,omitempty"`
	Error            *uint32     `protobuf:"varint,5,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SRankGainCoin) Reset()                    { *m = SRankGainCoin{} }
func (m *SRankGainCoin) String() string            { return proto.CompactTextString(m) }
func (*SRankGainCoin) ProtoMessage()               {}
func (*SRankGainCoin) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

const Default_SRankGainCoin_Code uint32 = 6001
const Default_SRankGainCoin_Error uint32 = 0

func (m *SRankGainCoin) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SRankGainCoin_Code
}

func (m *SRankGainCoin) GetRank() []*RankCoin {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *SRankGainCoin) GetCoin() int32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *SRankGainCoin) GetDrawed() uint32 {
	if m != nil && m.Drawed != nil {
		return *m.Drawed
	}
	return 0
}

func (m *SRankGainCoin) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SRankGainCoin_Error
}

// 每周一凌晨4点更新胜局排行
type CRankWin struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=6002" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CRankWin) Reset()                    { *m = CRankWin{} }
func (m *CRankWin) String() string            { return proto.CompactTextString(m) }
func (*CRankWin) ProtoMessage()               {}
func (*CRankWin) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

const Default_CRankWin_Code uint32 = 6002

func (m *CRankWin) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CRankWin_Code
}

type SRankWin struct {
	Code             *uint32    `protobuf:"varint,1,opt,name=code,def=6002" json:"code,omitempty"`
	Rank             []*RankWin `protobuf:"bytes,2,rep,name=rank" json:"rank,omitempty"`
	Win              *uint32    `protobuf:"varint,3,req,name=win" json:"win,omitempty"`
	Drawed           *uint32    `protobuf:"varint,4,req,name=drawed" json:"drawed,omitempty"`
	Error            *uint32    `protobuf:"varint,5,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SRankWin) Reset()                    { *m = SRankWin{} }
func (m *SRankWin) String() string            { return proto.CompactTextString(m) }
func (*SRankWin) ProtoMessage()               {}
func (*SRankWin) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

const Default_SRankWin_Code uint32 = 6002
const Default_SRankWin_Error uint32 = 0

func (m *SRankWin) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SRankWin_Code
}

func (m *SRankWin) GetRank() []*RankWin {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *SRankWin) GetWin() uint32 {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return 0
}

func (m *SRankWin) GetDrawed() uint32 {
	if m != nil && m.Drawed != nil {
		return *m.Drawed
	}
	return 0
}

func (m *SRankWin) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SRankWin_Error
}

// 每周一凌晨4点更新经验排行
type CRankExp struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=6003" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CRankExp) Reset()                    { *m = CRankExp{} }
func (m *CRankExp) String() string            { return proto.CompactTextString(m) }
func (*CRankExp) ProtoMessage()               {}
func (*CRankExp) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

const Default_CRankExp_Code uint32 = 6003

func (m *CRankExp) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CRankExp_Code
}

type SRankExp struct {
	Code             *uint32    `protobuf:"varint,1,opt,name=code,def=6003" json:"code,omitempty"`
	Rank             []*RankExp `protobuf:"bytes,2,rep,name=rank" json:"rank,omitempty"`
	Exp              *uint32    `protobuf:"varint,3,req,name=exp" json:"exp,omitempty"`
	Drawed           *uint32    `protobuf:"varint,4,req,name=drawed" json:"drawed,omitempty"`
	Error            *uint32    `protobuf:"varint,5,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SRankExp) Reset()                    { *m = SRankExp{} }
func (m *SRankExp) String() string            { return proto.CompactTextString(m) }
func (*SRankExp) ProtoMessage()               {}
func (*SRankExp) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

const Default_SRankExp_Code uint32 = 6003
const Default_SRankExp_Error uint32 = 0

func (m *SRankExp) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SRankExp_Code
}

func (m *SRankExp) GetRank() []*RankExp {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *SRankExp) GetExp() uint32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *SRankExp) GetDrawed() uint32 {
	if m != nil && m.Drawed != nil {
		return *m.Drawed
	}
	return 0
}

func (m *SRankExp) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SRankExp_Error
}

//  排行榜奖励
type CRankRewards struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=6005" json:"code,omitempty"`
	Kind             *uint32 `protobuf:"varint,2,req,name=kind" json:"kind,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CRankRewards) Reset()                    { *m = CRankRewards{} }
func (m *CRankRewards) String() string            { return proto.CompactTextString(m) }
func (*CRankRewards) ProtoMessage()               {}
func (*CRankRewards) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

const Default_CRankRewards_Code uint32 = 6005

func (m *CRankRewards) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_CRankRewards_Code
}

func (m *CRankRewards) GetKind() uint32 {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return 0
}

type SRankRewards struct {
	Code             *uint32 `protobuf:"varint,1,opt,name=code,def=6005" json:"code,omitempty"`
	Kind             *uint32 `protobuf:"varint,2,req,name=kind" json:"kind,omitempty"`
	Rewards          *uint32 `protobuf:"varint,3,req,name=rewards" json:"rewards,omitempty"`
	Error            *uint32 `protobuf:"varint,4,opt,name=error,def=0" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SRankRewards) Reset()                    { *m = SRankRewards{} }
func (m *SRankRewards) String() string            { return proto.CompactTextString(m) }
func (*SRankRewards) ProtoMessage()               {}
func (*SRankRewards) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

const Default_SRankRewards_Code uint32 = 6005
const Default_SRankRewards_Error uint32 = 0

func (m *SRankRewards) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_SRankRewards_Code
}

func (m *SRankRewards) GetKind() uint32 {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return 0
}

func (m *SRankRewards) GetRewards() uint32 {
	if m != nil && m.Rewards != nil {
		return *m.Rewards
	}
	return 0
}

func (m *SRankRewards) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_SRankRewards_Error
}

func init() {
	proto.RegisterType((*CRankCoin)(nil), "protocol.CRankCoin")
	proto.RegisterType((*SRankCoin)(nil), "protocol.SRankCoin")
	proto.RegisterType((*CRankGainCoin)(nil), "protocol.CRankGainCoin")
	proto.RegisterType((*SRankGainCoin)(nil), "protocol.SRankGainCoin")
	proto.RegisterType((*CRankWin)(nil), "protocol.CRankWin")
	proto.RegisterType((*SRankWin)(nil), "protocol.SRankWin")
	proto.RegisterType((*CRankExp)(nil), "protocol.CRankExp")
	proto.RegisterType((*SRankExp)(nil), "protocol.SRankExp")
	proto.RegisterType((*CRankRewards)(nil), "protocol.CRankRewards")
	proto.RegisterType((*SRankRewards)(nil), "protocol.SRankRewards")
}

var fileDescriptor7 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0xd0, 0x3b, 0x4f, 0xc3, 0x30,
	0x14, 0x05, 0x60, 0xe5, 0x05, 0xe9, 0x4d, 0xc2, 0xc3, 0x93, 0xc5, 0x40, 0x23, 0xb3, 0x64, 0x8a,
	0x4c, 0x11, 0x0c, 0xac, 0x15, 0x62, 0xaf, 0x07, 0x66, 0xab, 0xb6, 0x90, 0x15, 0x64, 0x07, 0xf3,
	0x48, 0x7f, 0x3e, 0xb2, 0xdb, 0x46, 0xaa, 0x94, 0x86, 0x66, 0x8a, 0x62, 0xdf, 0xe3, 0xf3, 0xe9,
	0x42, 0x61, 0xb9, 0x6e, 0x94, 0x7e, 0xaf, 0x5b, 0x6b, 0xbe, 0x0d, 0x4a, 0xfd, 0x67, 0x6d, 0x3e,
	0x6e, 0xd2, 0x5f, 0xb3, 0x3d, 0x23, 0x73, 0x98, 0x2d, 0x57, 0x5c, 0x37, 0x4b, 0xa3, 0x34, 0x42,
	0x10, 0xaf, 0x8d, 0x90, 0x38, 0x28, 0x83, 0xaa, 0x78, 0x8e, 0x9f, 0x28, 0xa5, 0xe4, 0x13, 0x66,
	0x6c, 0x6c, 0x00, 0x95, 0x10, 0xbb, 0x1a, 0x1c, 0x96, 0x51, 0x95, 0x2d, 0x50, 0xbd, 0x2f, 0xa9,
	0xfb, 0x54, 0xee, 0x52, 0x4a, 0xe3, 0xa8, 0x0c, 0xab, 0x02, 0x5d, 0xc0, 0x99, 0xb0, 0xbc, 0x93,
	0x02, 0xc7, 0xfe, 0xff, 0x0a, 0x12, 0x69, 0xad, 0xb1, 0x38, 0xf1, 0x8f, 0x06, 0x94, 0xdc, 0x41,
	0xe1, 0x4d, 0xaf, 0x5c, 0xe9, 0x23, 0xb5, 0xf7, 0xe4, 0x07, 0x0a, 0xf6, 0xdf, 0xd0, 0x44, 0x5b,
	0x72, 0x82, 0xed, 0x16, 0x52, 0x6f, 0x7b, 0x1b, 0x6c, 0x5c, 0x10, 0x0d, 0x29, 0x1b, 0xb9, 0x47,
	0xf3, 0x03, 0xd1, 0xf5, 0xa1, 0xc8, 0x85, 0x32, 0x88, 0xba, 0x09, 0xbb, 0xda, 0x7b, 0x5e, 0x36,
	0xed, 0x40, 0xdf, 0x43, 0xef, 0x39, 0x72, 0x3f, 0xee, 0x71, 0xa1, 0x0c, 0x22, 0xb9, 0x69, 0x4f,
	0xf6, 0x50, 0xc8, 0xbd, 0x67, 0x25, 0x3b, 0x6e, 0xc5, 0xd7, 0x40, 0xe7, 0xa3, 0xdb, 0x79, 0xa3,
	0xb4, 0xc0, 0xa1, 0x7b, 0x83, 0x30, 0xc8, 0xd9, 0xa4, 0x04, 0xba, 0x84, 0x73, 0xbb, 0x1d, 0xde,
	0xb1, 0x7a, 0x46, 0xbc, 0x63, 0xfc, 0x05, 0x00, 0x00, 0xff, 0xff, 0x11, 0x87, 0xa6, 0xd0, 0xfa,
	0x02, 0x00, 0x00,
}
